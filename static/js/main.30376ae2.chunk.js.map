{"version":3,"sources":["logo.svg","components/EquationVariable.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","EquationVariable","style","textAlign","paddingLeft","this","props","label","display","flexDirection","alignItems","checkable","Check","checked","onChange","e","checkCallback","target","Control","value","type","min","max","valueCallback","Component","App","calculateData","dataRed","dataBlue","state","cubesBlueChecked","cubesRedChecked","i","datum","calculateDifference","cubesBlue","cubesRed","push","x","y","lbl","selFactorBlueChecked","selFactorRedChecked","selFactorBlue","selFactorRed","towerSelChecked","towerSel","data","Object","assign","Math","floor","result","dataRaw","xAxisLabel","margin","height","className","title","setState","parseFloat","percentage","permin","width","boxSizing","flex","domainPadding","containerComponent","labels","dependentAxis","stroke","parent","border","centered","show","modalHidden","onHide","Header","closeButton","Title","Body","Footer","onClick","variant","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.30376ae2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport Form from 'react-bootstrap/Form'\r\n\r\nclass EquationVariable extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div style={{\r\n                    textAlign: \"left\",\r\n                    paddingLeft: \"20px\"\r\n                }}>\r\n                    {this.props.label}\r\n                </div>\r\n                <div style={{\r\n                    display: \"flex\",\r\n                    flexDirection: \"row\",\r\n                    alignItems: \"center\"\r\n                }}>\r\n                    {\r\n                        this.props.checkable ?\r\n                            <Form.Check\r\n                                checked={this.props.checked}\r\n                                onChange={(e) => {\r\n                                    if (this.props.checkCallback)\r\n                                        this.props.checkCallback(this.props.label, e.target.checked)\r\n                                }}\r\n                            />\r\n                            :\r\n                            <></>\r\n                    }\r\n                    <Form.Control\r\n                        value={this.props.value}\r\n                        type=\"number\"\r\n                        min={this.props.min}\r\n                        max={this.props.max}\r\n                        onChange={(e) => {\r\n                            if (this.props.valueCallback)\r\n                                this.props.valueCallback(this.props.label, e.target.value)\r\n                        }}\r\n                    />\r\n                </div>\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default EquationVariable;\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Modal from 'react-bootstrap/Modal'\nimport Button from 'react-bootstrap/Button'\nimport EquationVariable from './components/EquationVariable'\nimport { VictoryChart, VictoryAxis, VictoryLine, VictoryVoronoiContainer } from 'victory';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      cubesRed: 1,\n      cubesRedChecked: true,\n      cubesBlueChecked: false,\n      selFactorRed: .25,\n      selFactorRedChecked: false,\n      selFactorBlueChecked: false,\n      towerSelChecked: false,\n      cubesBlue: 1,\n      selFactorBlue: 1,\n      towerSel: 1\n    }\n\n  }\n\n  calculateData = () => {\n    var dataRed = [];\n    var dataBlue = [];\n    var label = \"Label not filled\"\n\n    if (this.state.cubesBlueChecked || this.state.cubesRedChecked) {\n      label = (this.state.cubesBlueChecked ? \"Blue\" : \"Red\") + \" Cubes\"\n      for (var i = 0; i < 100; i++) {\n        var datum;\n\n        if (this.state.cubesBlueChecked)\n          datum = this.calculateDifference({ cubesBlue: i })\n        else\n          datum = this.calculateDifference({ cubesRed: i })\n\n        if (datum > 0)\n          dataRed.push({ x: i, y: datum, lbl: \"Red wins!\\n\" + label + \": \" + i })\n        else if (datum < 0)\n          dataBlue.push({ x: i, y: datum, lbl: \"Blue wins!\\n\" + label + \": \" + i })\n        else\n          dataBlue.push({ x: i, y: datum, lbl: \"Tie!\\n\" + label + \": \" + i })\n      }\n    }\n\n    if (this.state.selFactorBlueChecked || this.state.selFactorRedChecked) {\n      label = (this.state.selFactorBlueChecked ? \"Blue\" : \"Red\") + \"  Factor\"\n      for (var i = 0; i < 1000; i++) {\n        var datum;\n\n        if (this.state.selFactorBlueChecked)\n          datum = this.calculateDifference({ selFactorBlue: i / 1000 })\n        else\n          datum = this.calculateDifference({ selFactorRed: i / 1000 })\n\n        if (datum > 0)\n          dataRed.push({ x: i, y: datum, lbl: \"Red wins!\\n\" + label + \": \" + i / 1000 })\n        else if (datum < 0)\n          dataBlue.push({ x: i, y: datum, lbl: \"Blue wins!\\n\" + label + \": \" + i / 1000 })\n        else\n          dataBlue.push({ x: i, y: datum, lbl: \"Tie!\\n\" + label + \": \" + i })\n      }\n    }\n\n    if (this.state.towerSelChecked) {\n      label = \"Cubes of selected in tower\"\n      for (var i = 0; i < 10; i++) {\n        var datum = this.calculateDifference({ towerSel: i })\n\n        if (datum > 0)\n          dataRed.push({ x: i, y: datum, lbl: \"Red wins!\\n\" + label + \": \" + i })\n        else if (datum < 0)\n          dataBlue.push({ x: i, y: datum, lbl: \"Blue wins!\\n\" + label + \": \" + i })\n        else\n          dataBlue.push({ x: i, y: datum, lbl: \"Tie!\\n\" + label + \": \" + i })\n      }\n    }\n\n    if (dataRed[0] && dataBlue[0] && dataRed[0].x < dataBlue[0].x) {\n      dataRed.push(dataBlue[0]);\n    } else if (dataRed[0] && dataBlue[0] && dataBlue[0].x < dataRed[0].x) {\n      dataBlue.push(dataRed[0]);\n    }\n\n    return [dataRed, dataBlue, label];\n  }\n\n  calculateDifference = (data) => {\n    data = Object.assign(Object.assign({}, this.state), data);\n    return (data.cubesRed + Math.floor(data.selFactorRed * (data.cubesRed * (data.towerSel)))) - (data.cubesBlue + Math.floor(data.selFactorBlue * (data.cubesBlue * (data.towerSel))))\n  }\n\n  render() {\n    var result = this.calculateDifference();\n\n    var dataRaw = this.calculateData();\n    var dataRed = dataRaw[0];\n    var dataBlue = dataRaw[1];\n    var xAxisLabel = dataRaw[2];\n\n    return (\n      <div style={{\n        margin: \"20px\",\n        textAlign: \"center\",\n        alignItems: \"center\",\n        flexDirection: \"column\",\n        height: \"100%\",\n        display: \"flex\"\n      }}>\n\n        <h2>Are towers worth it?</h2>\n        <h5>A simple calculator to help model an answer to that question</h5>\n\n        <div className=\"container-fluid\">\n          <div className=\"row justify-content-md-center\">\n            <div className=\"col-sm-6\">\n              <div className=\"row justify-content-md-center\">\n                <div className=\"col-sm-6\">\n                  <EquationVariable\n                    value={this.state.cubesRed}\n                    checkCallback={(title, checked) => {\n                      this.setState({ cubesRedChecked: true, selFactorRedChecked: false, towerSelChecked: false, cubesBlueChecked: false, selFactorBlueChecked: false })\n                    }}\n                    valueCallback={(title, cubesRed) => {\n                      this.setState({ cubesRed: parseFloat(cubesRed) })\n                    }}\n                    checkable={true}\n                    checked={this.state.cubesRedChecked}\n                    min={1}\n                    label=\"Red cubes\"\n                  />\n                </div>\n                <div className=\"col-sm-6\">\n                  <EquationVariable\n                    value={this.state.cubesRed / this.state.cubesBlue}\n                    valueCallback={(title, percentage) => {\n                      this.setState({ cubesRed: this.state.cubesBlue * parseFloat(percentage) })\n                    }}\n                    label=\"Red cubes (as % of blue)\"\n                  />\n                  <EquationVariable\n                    value={this.state.cubesRed / 105}\n                    valueCallback={(title, permin) => {\n                      this.setState({ cubesRed: 105 * parseFloat(permin) })\n                    }}\n                    label=\"Red cubes (as cubes/sec)\"\n                  />\n                </div>\n              </div>\n            </div>\n            <div className=\"col-sm-6\">\n              <div className=\"row justify-content-md-center\">\n                <div className=\"col-sm-6\">\n                  <EquationVariable\n                    value={this.state.cubesBlue}\n                    checkCallback={(title, checked) => {\n                      this.setState({ cubesRedChecked: false, selFactorRedChecked: false, towerSelChecked: false, cubesBlueChecked: true, selFactorBlueChecked: false })\n                    }}\n                    valueCallback={(title, cubesBlue) => {\n                      this.setState({ cubesBlue: parseFloat(cubesBlue) })\n                    }}\n                    checkable={true}\n                    checked={this.state.cubesBlueChecked}\n                    min={1}\n                    label=\"Blue cubes\"\n                  />\n                </div>\n                <div className=\"col-sm-6\">\n                  <EquationVariable\n                    value={this.state.cubesBlue / this.state.cubesRed}\n                    valueCallback={(title, percentage) => {\n                      this.setState({ cubesBlue: this.state.cubesRed * percentage })\n                    }}\n                    label=\"Blue cubes (as % of red)\"\n                  />\n                  <EquationVariable\n                    value={this.state.cubesBlue / 105}\n                    valueCallback={(title, permin) => {\n                      this.setState({ cubesBlue: 105 * parseFloat(permin) })\n                    }}\n                    label=\"Blue cubes (as cubes/sec)\"\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"row justify-content-md-center\">\n            <div className=\"col-sm-6\">\n              <EquationVariable\n                value={this.state.selFactorRed}\n                checkCallback={(title, checked) => {\n                  this.setState({ cubesRedChecked: false, selFactorRedChecked: true, towerSelChecked: false, cubesBlueChecked: false, selFactorBlueChecked: false })\n                }}\n                valueCallback={(title, selFactorRed) => {\n                  this.setState({ selFactorRed: parseFloat(selFactorRed) })\n                }}\n                checkable={true}\n                checked={this.state.selFactorRedChecked}\n                label=\"Red selection factor [0-1]\"\n                min={0}\n                max={1}\n              />\n            </div>\n            <div className=\"col-sm-6\">\n              <EquationVariable\n                value={this.state.selFactorBlue}\n                checkCallback={(title, checked) => {\n                  this.setState({ cubesRedChecked: false, selFactorRedChecked: false, towerSelChecked: false, cubesBlueChecked: false, selFactorBlueChecked: true })\n                }}\n                valueCallback={(title, selFactorBlue) => {\n                  this.setState({ selFactorBlue: parseFloat(selFactorBlue) })\n                }}\n                checkable={true}\n                checked={this.state.selFactorBlueChecked}\n                label=\"Blue selection factor [0-1]\"\n                min={0}\n                max={1}\n              />\n            </div>\n          </div>\n          <div className=\"row justify-content-md-center\">\n            <div className=\"col-sm-6\">\n              <EquationVariable\n                value={this.state.towerSel}\n                checkCallback={(title, checked) => {\n                  this.setState({ cubesRedChecked: false, selFactorRedChecked: false, towerSelChecked: true, cubesBlueChecked: false, selFactorBlueChecked: false })\n                }}\n                valueCallback={(title, towerSel) => {\n                  this.setState({ towerSel: parseFloat(towerSel) })\n                }}\n                checkable={true}\n                checked={this.state.towerSelChecked}\n                label=\"Tower cubes\"\n                min={0}\n              />\n            </div>\n            <div className=\"col-sm-6\" />\n          </div>\n        </div>\n\n        <div style={{\n          width: \"100%\",\n          display: \"flex\",\n          alignItems: \"center\",\n          flexDirection: \"column\"\n        }}>\n          <hr style={{ width: \"100%\" }} />\n          <div style={{ width: \"80%\" }}>\n            [Points scored by red] - [Points scored by blue]\n            <br />\n            [Red points from cubes + Red points from towers] - [Blue points from cubes + Blue points from towers]\n            <br />\n            [<b>CubesRed</b> + floor(<b>SelFactorRed</b> * (<b>CubesRed</b> * <b>TowerCubes</b>) )] - [<b>CubesBlue</b> + floor(<b>SelFactorBlue</b> * (<b>CubesBlue</b> * <b>TowerCubes</b>) )]\n            <br />\n            [<b>{this.state.cubesRed}</b> + (<b>{this.state.selFactorRed}</b> * (<b>{this.state.cubesRed}</b> * (<b>{this.state.towerSel}</b> - 1)))] - [<b>{this.state.cubesBlue}</b> + (<b>{this.state.selFactorBlue}</b> * (<b>{this.state.cubesBlue}</b> * (<b>{this.state.towerSel}</b> - 1)))]\n            {\n              this.state.towerSel - 1 < 0 ?\n                <>\n                  <br />\n                  *Ignoring points from towers as tower cubes is 0\n              </>\n                :\n                <></>\n            }\n            <br />\n            {result}\n            <br /><br />\n            <h5>{result > 0 ? \"Red wins!\" : (result < 0 ? \"Blue wins!\" : \"Tie!\")}</h5>\n          </div>\n          <hr style={{ width: \"100%\" }} />\n        </div>\n\n        <div style={{ boxSizing: \"border-box\", width: \"30%\", flex: 1 }}>\n          <VictoryChart\n            domainPadding={20}\n            containerComponent={\n              <VictoryVoronoiContainer\n                labels={({ datum }) => `${datum.lbl}`}\n              />\n            }\n          >\n            <VictoryAxis\n              label={xAxisLabel}\n            />\n            <VictoryAxis\n              dependentAxis\n              label=\"Differential\"\n            />\n            <VictoryLine\n              style={{\n                data: { stroke: \"#c62828\" },\n                parent: { border: \"1px solid #ccc\" }\n              }}\n              data={dataRed}\n            />\n            <VictoryLine\n              style={{\n                data: { stroke: \"#1565c0\" },\n                parent: { border: \"1px solid #ccc\" }\n              }}\n              data={dataBlue}\n            />\n          </VictoryChart>\n        </div>\n\n        <Modal centered show={!this.state.modalHidden} onHide={() => this.setState({ modalHidden: true })}>\n          <Modal.Header closeButton>\n            <Modal.Title>Usage Notes</Modal.Title>\n          </Modal.Header>\n\n          <Modal.Body>\n            <p>The \"cubes\" field is the number of cubes that the robot can score in a match. The \"as % of x\" and \"as cubes/sec\" fields are ways to fill out the \"cubes\" field in a way that may make more sense for different scenarios. For example, you could fill out the \"Red cubes\" field with the number of cubes your robot could score, and then if you think an opponent robot that picks out a certain color would be about 20% slower than your bot, you could fill in \"0.8\" for the \"Blue Cubes (as % of red)\" field.</p>\n            <br />\n            <p>The \"selection factor\" field represents the percentage of cubes that a certain robot picks up that are the color cube in the tower. For example, if the color cube in the tower is purple, and a robot picks up 10 cubes, 5 of which are purple, its selection factor would be 0.5.</p>\n            <br />\n            <p>The \"tower cubes\" field represents the number of cubes in the tower for the theoretical selected color.</p>\n          </Modal.Body>\n\n          <Modal.Footer>\n            <Button onClick={() => this.setState({ modalHidden: true })} variant=\"primary\">Let's go!</Button>\n          </Modal.Footer>\n        </Modal>\n      </div >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}