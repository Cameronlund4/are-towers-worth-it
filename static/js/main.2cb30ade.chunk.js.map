{"version":3,"sources":["logo.svg","components/EquationVariable.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","EquationVariable","style","textAlign","paddingLeft","this","props","label","display","flexDirection","alignItems","checkable","Check","checked","onChange","e","checkCallback","target","Control","value","type","min","max","valueCallback","Component","App","state","cubesRed","cubesRedChecked","selFactorRed","selFactorRedChecked","towerSelChecked","cubesBlue","selFactorBlue","towerSel","result","Math","floor","console","log","margin","className","title","setState","parseFloat","percentage","permin","width","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2cb30ade.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport Form from 'react-bootstrap/Form'\r\n\r\nclass EquationVariable extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div style={{\r\n                    textAlign: \"left\",\r\n                    paddingLeft: \"20px\"\r\n                }}>\r\n                    {this.props.label}\r\n                </div>\r\n                <div style={{\r\n                    display: \"flex\",\r\n                    flexDirection: \"row\",\r\n                    alignItems: \"center\"\r\n                }}>\r\n                    {\r\n                        this.props.checkable ?\r\n                            <Form.Check\r\n                                checked={this.props.checked}\r\n                                onChange={(e) => {\r\n                                    if (this.props.checkCallback)\r\n                                        this.props.checkCallback(this.props.label, e.target.checked)\r\n                                }}\r\n                            />\r\n                            :\r\n                            <></>\r\n                    }\r\n                    <Form.Control\r\n                        value={this.props.value}\r\n                        type=\"number\"\r\n                        min={this.props.min}\r\n                        max={this.props.max}\r\n                        onChange={(e) => {\r\n                            if (this.props.valueCallback)\r\n                                this.props.valueCallback(this.props.label, e.target.value)\r\n                        }}\r\n                    />\r\n                </div>\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default EquationVariable;\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Button from 'react-bootstrap/Button'\nimport EquationVariable from './components/EquationVariable'\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      cubesRed: 1,\n      cubesRedChecked: true,\n      selFactorRed: .25,\n      selFactorRedChecked: false,\n      towerSelChecked: false,\n      cubesBlue: 1,\n      selFactorBlue: 1,\n      towerSel: 1\n    }\n\n  }\n\n  render() {\n    var towerSel = this.state.towerSel;\n    var selFactorRed = this.state.selFactorRed\n    var selFactorBlue = this.state.selFactorBlue\n    if (towerSel < 0) {\n      towerSel = 0;\n      selFactorRed = 0;\n      selFactorBlue = 0;\n    }\n      \n    var result = (this.state.cubesRed + Math.floor(selFactorRed * (this.state.cubesRed * (towerSel)))) - (this.state.cubesBlue + Math.floor(selFactorBlue * (this.state.cubesBlue * (towerSel))));\n    console.log((this.state.cubesRed + (selFactorRed * (this.state.cubesRed * (towerSel)))))\n    console.log((this.state.cubesBlue + (selFactorBlue * (this.state.cubesBlue * (towerSel)))))\n    console.log(this.state.cubesBlue);\n    console.log((selFactorBlue * (this.state.cubesBlue * (towerSel))))\n\n    return (\n      <div style={{\n        margin: \"20px\",\n        textAlign: \"center\",\n        display: \"flex\",\n        alignItems: \"center\",\n        flexDirection: \"column\"\n      }}>\n\n        <h2>Are towers worth it?</h2>\n        <h5>A simple calculator to help model an answer to that question</h5>\n\n        <div className=\"container-fluid\">\n          <div className=\"row justify-content-md-center\">\n            <div className=\"col-sm-6\">\n              <div className=\"row justify-content-md-center\">\n                <div className=\"col-sm-6\">\n                  <EquationVariable\n                    value={this.state.cubesRed}\n                    checkCallback={(title, checked) => {\n                      this.setState({ cubesRedChecked: true, selFactorRedChecked: false, towerSelChecked: false })\n                    }}\n                    valueCallback={(title, cubesRed) => {\n                      this.setState({ cubesRed: parseFloat(cubesRed) })\n                    }}\n                    checkable={true}\n                    checked={this.state.cubesRedChecked}\n                    min={1}\n                    label=\"Red cubes\"\n                  />\n                </div>\n                <div className=\"col-sm-6\">\n                  <EquationVariable\n                    value={this.state.cubesRed / this.state.cubesBlue}\n                    valueCallback={(title, percentage) => {\n                      this.setState({ cubesRed: this.state.cubesBlue * parseFloat(percentage)})\n                    }}\n                    label=\"Red cubes (as % of blue)\"\n                  />\n                  <EquationVariable\n                    value={this.state.cubesRed / 105}\n                    valueCallback={(title, permin) => {\n                      this.setState({ cubesRed: 105 * parseFloat(permin)})\n                    }}\n                    label=\"Red cubes (as cubes/sec)\"\n                  />\n                </div>\n              </div>\n            </div>\n            <div className=\"col-sm-6\">\n            <div className=\"row justify-content-md-center\">\n                <div className=\"col-sm-6\">\n                  <EquationVariable\n                    value={this.state.cubesBlue}\n                    checkCallback={(title, checked) => {\n                      this.setState({ cubesRedChecked: true, selFactorRedChecked: false, towerSelChecked: false })\n                    }}\n                    valueCallback={(title, cubesBlue) => {\n                      this.setState({ cubesBlue: parseFloat(cubesBlue) })\n                    }}\n                    checkable={true}\n                    checked={this.state.cubesRedChecked}\n                    min={1}\n                    label=\"Blue cubes\"\n                  />\n                </div>\n                <div className=\"col-sm-6\">\n                  <EquationVariable\n                    value={this.state.cubesBlue / this.state.cubesRed}\n                    valueCallback={(title, percentage) => {\n                      this.setState({ cubesBlue: this.state.cubesRed * percentage})\n                    }}\n                    label=\"Blue cubes (as % of red)\"\n                  />\n                  <EquationVariable\n                    value={this.state.cubesBlue / 105}\n                    valueCallback={(title, permin) => {\n                      this.setState({ cubesBlue: 105 * parseFloat(permin)})\n                    }}\n                    label=\"Blue cubes (as cubes/sec)\"\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"row justify-content-md-center\">\n            <div className=\"col-sm-6\">\n              <EquationVariable\n                value={this.state.selFactorRed}\n                checkCallback={(title, checked) => {\n                  this.setState({ cubesRedChecked: false, selFactorRedChecked: true, towerSelChecked: false })\n                }}\n                valueCallback={(title, selFactorRed) => {\n                  this.setState({ selFactorRed: parseFloat(selFactorRed) })\n                }}\n                checkable={true}\n                checked={this.state.selFactorRedChecked}\n                label=\"Red selection factor [0-1]\"\n                min={0}\n                max={1}\n              />\n            </div>\n            <div className=\"col-sm-6\">\n              <EquationVariable\n                value={this.state.selFactorBlue}\n                checkCallback={(title, checked) => {\n                  this.setState({ cubesRedChecked: false, selFactorRedChecked: true, towerSelChecked: false })\n                }}\n                valueCallback={(title, selFactorBlue) => {\n                  this.setState({ selFactorBlue: parseFloat(selFactorBlue) })\n                }}\n                checkable={true}\n                checked={this.state.selFactorRedChecked}\n                label=\"Blue selection factor [0-1]\"\n                min={0}\n                max={1}\n              />\n            </div>\n          </div>\n          <div className=\"row justify-content-md-center\">\n            <div className=\"col-sm-6\">\n              <EquationVariable\n                value={this.state.towerSel}\n                checkCallback={(title, checked) => {\n                  this.setState({ cubesRedChecked: false, selFactorRedChecked: false, towerSelChecked: true })\n                }}\n                valueCallback={(title, towerSel) => {\n                  this.setState({ towerSel: parseFloat(towerSel) })\n                }}\n                checkable={true}\n                checked={this.state.towerSelChecked}\n                label=\"Tower cubes\"\n              />\n            </div>\n            <div className=\"col-sm-6\" />\n          </div>\n        </div>\n\n        <div style={{\n          width: \"100%\",\n          display: \"flex\",\n          alignItems: \"center\",\n          flexDirection: \"column\"\n        }}>\n          <hr style={{ width: \"100%\" }} />\n          <div style={{ width: \"80%\" }}>\n            [Points scored by red] - [Points scored by blue]\n            <br />\n            [Red points from cubes + Red points from towers] - [Blue points from cubes + Blue points from towers]\n            <br />\n            [<b>CubesRed</b> + floor(<b>SelFactorRed</b> * (<b>CubesRed</b> * <b>TowerCubes</b>) )] - [<b>CubesBlue</b> + floor(<b>SelFactorBlue</b> * (<b>CubesBlue</b> * <b>TowerCubes</b>) )]\n            <br />\n            [<b>{this.state.cubesRed}</b> + (<b>{this.state.selFactorRed}</b> * (<b>{this.state.cubesRed}</b> * (<b>{this.state.towerSel}</b> - 1)))] - [<b>{this.state.cubesBlue}</b> + (<b>{this.state.selFactorBlue}</b> * (<b>{this.state.cubesBlue}</b> * (<b>{this.state.towerSel}</b> - 1)))]\n            {\n              this.state.towerSel-1 < 0 ?\n              <>\n                <br/>\n                *Ignoring points from towers as tower cubes is 0\n              </>\n              :\n              <></>\n            }\n            <br />\n            {result}\n            <br /><br />\n            <h5>{result > 0 ? \"Red wins!\" : (result < 0 ? \"Blue wins!\" : \"Tie!\")}</h5>\n          </div>\n          <hr style={{ width: \"100%\" }} />\n        </div>\n      </div >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}